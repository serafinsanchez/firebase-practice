rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone can read user profiles
      // Only the user themselves or an admin can write to their profile
      allow read: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isOwner(userId) || isAdmin();
    }
    
    // Posts collection
    match /posts/{postId} {
      // Published posts can be read by anyone
      // Draft posts can only be read by the author or an admin
      // Only authenticated users can create posts
      // Only the author or an admin can update/delete posts
      allow read: if resource.data.status == 'published' || 
                   isOwner(resource.data.authorId) || 
                   isAdmin();
      allow create: if isSignedIn() && 
                     request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    // Comments collection
    match /comments/{commentId} {
      // Anyone can read comments
      // Only authenticated users can create comments
      // Only the comment author or an admin can update/delete comments
      allow read: if true;
      allow create: if isSignedIn() && 
                     request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId) || 
                             isAdmin() || 
                             isOwner(get(/databases/$(database)/documents/posts/$(resource.data.postId)).data.authorId);
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 